name: Build and Push Docker Images

on:
  push:
    branches: [main, dev]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'docker-compose.yml'
      - 'backend/docker-compose.microservices.yml'
      - '.github/workflows/docker-build-push.yml'
  pull_request:
    branches: [main, dev]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'docker-compose.yml'
      - 'backend/docker-compose.microservices.yml'
      - '.github/workflows/docker-build-push.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build shared libraries first
  build-shared:
    name: Build Shared Libraries
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: backend
        run: npm ci

      - name: Build shared libraries
        working-directory: backend
        run: npm run build:shared

      - name: Cache shared libraries
        uses: actions/cache@v3
        with:
          path: |
            backend/shared/*/dist
            backend/node_modules
          key: ${{ runner.os }}-shared-${{ hashFiles('backend/shared/**/package.json') }}

  # Build and test microservices
  build-and-test-microservices:
    name: Build & Test Microservices
    runs-on: ubuntu-latest
    needs: build-shared

    strategy:
      matrix:
        service:
          - config-service
          - stock-integration-service
          - shipping-service
          - operator-interface-service

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Restore shared libraries cache
        uses: actions/cache@v3
        with:
          path: |
            backend/shared/*/dist
            backend/node_modules
          key: ${{ runner.os }}-shared-${{ hashFiles('backend/shared/**/package.json') }}

      - name: Install dependencies
        working-directory: backend
        run: npm ci

      - name: Build ${{ matrix.service }}
        working-directory: backend
        run: npm run build --workspace=services/${{ matrix.service }}

      - name: Run tests for ${{ matrix.service }}
        working-directory: backend
        run: npm run test --workspace=services/${{ matrix.service }}

  # Build and push Docker images for microservices
  build-and-push-microservices:
    name: Build & Push Microservice Images
    runs-on: ubuntu-latest
    needs: build-and-test-microservices
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service:
          - config-service
          - stock-integration-service
          - shipping-service
          - operator-interface-service

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/services/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Image digest
        run: echo ${{ steps.build.outputs.digest }}

  # Build and push frontend (if exists)
  build-and-push-frontend:
    name: Build & Push Frontend
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    if: hashFiles('frontend/Dockerfile') != ''

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Image digest
        run: echo ${{ steps.build.outputs.digest }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build-and-push-microservices, build-and-push-frontend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    strategy:
      matrix:
        service:
          - config-service
          - stock-integration-service
          - shipping-service
          - operator-interface-service
          - frontend

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:latest
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push-microservices, build-and-push-frontend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    environment: staging

    steps:
      - name: Deploy microservices to staging
        run: |
          echo "ðŸš€ Deploying microservices to staging environment..."
          echo "ðŸ“¦ Config Service: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-config-service:dev"
          echo "ðŸ“¦ Stock Integration: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-stock-integration-service:dev"
          echo "ðŸ“¦ Shipping Service: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-shipping-service:dev"
          echo "ðŸ“¦ Operator Interface: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-operator-interface-service:dev"
          echo "ðŸ“¦ Frontend: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:dev"
          echo "âœ… Staging deployment completed"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push-microservices, build-and-push-frontend, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Deploy microservices to production
        run: |
          echo "ðŸš€ Deploying microservices to production environment..."
          echo "ðŸ“¦ Config Service: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-config-service:latest"
          echo "ðŸ“¦ Stock Integration: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-stock-integration-service:latest"
          echo "ðŸ“¦ Shipping Service: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-shipping-service:latest"
          echo "ðŸ“¦ Operator Interface: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-operator-interface-service:latest"
          echo "ðŸ“¦ Frontend: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest"
          echo "âœ… Production deployment completed"
