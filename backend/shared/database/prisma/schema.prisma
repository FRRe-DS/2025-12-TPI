generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model TransportMethod {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code          String         @unique @db.VarChar(20)
  name          String         @db.VarChar(100)
  description   String?
  averageSpeed  Int            @map("average_speed")
  estimatedDays String         @map("estimated_days") @db.VarChar(20)
  baseCostPerKm Decimal        @map("base_cost_per_km") @db.Decimal(10, 2)
  baseCostPerKg Decimal        @map("base_cost_per_kg") @db.Decimal(10, 2)
  isActive      Boolean?       @default(true) @map("is_active")
  createdAt     DateTime?      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime?      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  routes        Route[]
  tariffConfigs TariffConfig[]
  vehicles      Vehicle[]

  @@index([isActive], map: "idx_transport_methods_active")
  @@index([code], map: "idx_transport_methods_code")
  @@map("transport_methods")
}

model CoverageZone {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String    @db.VarChar(100)
  description String?
  postalCodes String[]  @map("postal_codes")
  isActive    Boolean?  @default(true) @map("is_active")
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  routes      Route[]

  @@index([isActive], map: "idx_coverage_zones_active")
  @@index([postalCodes], map: "idx_coverage_zones_postal_codes", type: Gin)
  @@map("coverage_zones")
}

model TariffConfig {
  id                String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  transportMethodId String          @map("transport_method_id") @db.Uuid
  baseTariff        Decimal         @map("base_tariff") @db.Decimal(10, 2)
  costPerKg         Decimal         @map("cost_per_kg") @db.Decimal(10, 2)
  costPerKm         Decimal         @map("cost_per_km") @db.Decimal(10, 2)
  volumetricFactor  Int             @map("volumetric_factor")
  environment       String?         @default("development") @db.VarChar(20)
  isActive          Boolean?        @default(true) @map("is_active")
  validFrom         DateTime?       @default(now()) @map("valid_from") @db.Timestamptz(6)
  validTo           DateTime?       @map("valid_to") @db.Timestamptz(6)
  createdAt         DateTime?       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime?       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  transportMethod   TransportMethod @relation(fields: [transportMethodId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([transportMethodId], map: "idx_tariff_configs_transport_method")
  @@index([environment], map: "idx_tariff_configs_environment")
  @@index([isActive], map: "idx_tariff_configs_active")
  @@map("tariff_configs")
}

model Vehicle {
  id                String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  license_plate     String           @unique @db.VarChar(20)
  make              String           @db.VarChar(50)
  model             String           @db.VarChar(50)
  year              Int
  capacityKg        Int              @map("capacity_kg")
  volumeM3          Decimal          @map("volume_m3") @db.Decimal(10, 2)
  fuelType          String           @map("fuel_type") @db.VarChar(20)
  status            String           @db.VarChar(20)
  transportMethodId String?          @map("transport_method_id") @db.Uuid
  driverId          String?          @map("driver_id") @db.Uuid
  createdAt         DateTime?        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime?        @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  routes            Route[]
  driver            Driver?          @relation(fields: [driverId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_vehicles_driver")
  transportMethod   TransportMethod? @relation(fields: [transportMethodId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_vehicles_transport_method")

  @@index([license_plate], map: "idx_vehicles_license_plate")
  @@index([status], map: "idx_vehicles_status")
  @@index([driverId], map: "idx_vehicles_driver")
  @@index([transportMethodId], map: "idx_vehicles_transport_method")
  @@map("vehicles")
}

model Driver {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employeeId    String    @unique @map("employee_id") @db.VarChar(30)
  firstName     String    @map("first_name") @db.VarChar(80)
  lastName      String    @map("last_name") @db.VarChar(80)
  email         String    @unique @db.VarChar(150)
  phone         String    @db.VarChar(30)
  licenseNumber String    @unique @map("license_number") @db.VarChar(50)
  licenseType   String    @map("license_type") @db.VarChar(10)
  status        String    @db.VarChar(20)
  createdAt     DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  routes        Route[]
  vehicles      Vehicle[]

  @@index([employeeId], map: "idx_drivers_employee_id")
  @@index([email], map: "idx_drivers_email")
  @@index([status], map: "idx_drivers_status")
  @@map("drivers")
}

model Route {
  id                String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String          @db.VarChar(100)
  description       String?
  status            String          @db.VarChar(20)
  startDate         DateTime        @map("start_date") @db.Timestamptz(6)
  endDate           DateTime?       @map("end_date") @db.Timestamptz(6)
  transportMethodId String          @map("transport_method_id") @db.Uuid
  vehicleId         String?         @map("vehicle_id") @db.Uuid
  driverId          String?         @map("driver_id") @db.Uuid
  coverageZoneId    String?         @map("coverage_zone_id") @db.Uuid
  createdAt         DateTime?       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime?       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  stops             RouteStop[]
  coverageZone      CoverageZone?   @relation(fields: [coverageZoneId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_routes_coverage_zone")
  driver            Driver?         @relation(fields: [driverId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_routes_driver")
  transportMethod   TransportMethod @relation(fields: [transportMethodId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_routes_transport_method")
  vehicle           Vehicle?        @relation(fields: [vehicleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_routes_vehicle")

  @@index([status], map: "idx_routes_status")
  @@index([startDate], map: "idx_routes_start_date")
  @@index([transportMethodId], map: "idx_routes_transport_method")
  @@index([coverageZoneId], map: "idx_routes_coverage_zone")
  @@index([driverId], map: "idx_routes_driver")
  @@index([vehicleId], map: "idx_routes_vehicle")
  @@map("routes")
}

model RouteStop {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  routeId       String    @map("route_id") @db.Uuid
  sequence      Int
  type          String    @db.VarChar(20)
  address       Json
  coordinates   Json?
  scheduledTime DateTime? @map("scheduled_time") @db.Timestamptz(6)
  actualTime    DateTime? @map("actual_time") @db.Timestamptz(6)
  status        String    @db.VarChar(20)
  createdAt     DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  route         Route     @relation(fields: [routeId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_route_stops_route")

  @@index([routeId], map: "idx_route_stops_route")
  @@index([sequence], map: "idx_route_stops_sequence")
  @@index([status], map: "idx_route_stops_status")
  @@map("route_stops")
}
