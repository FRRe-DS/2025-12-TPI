version: '3.8'

services:
  # Base de datos compartida
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: logistica_db
      POSTGRES_USER: logistica_user
      POSTGRES_PASSWORD: logistica_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - logistics-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U logistica_user -d logistica_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cache compartido
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - logistics-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Microservicio de Configuración (Puerto 3003)
  config-service:
    build:
      context: .
      dockerfile: services/config-service/Dockerfile
    ports:
      - "3003:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgresql://logistica_user:logistica_pass@postgres:5432/logistica_db
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - logistics-network
    volumes:
      - ./services/config-service/src:/app/src:ro
      - ./shared:/app/shared:ro
    command: npm run start:dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Microservicio de Integración con Stock (Puerto 3002)
  stock-integration-service:
    build:
      context: .
      dockerfile: services/stock-integration-service/Dockerfile
    ports:
      - "3002:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - REDIS_URL=redis://redis:6379
      - STOCK_API_BASE_URL=http://stock.ds.frre.utn.edu.ar:3000
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - logistics-network
    volumes:
      - ./services/stock-integration-service/src:/app/src:ro
      - ./shared:/app/shared:ro
    command: npm run start:dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Microservicio de Envíos (Puerto 3001)
  shipping-service:
    build:
      context: .
      dockerfile: services/shipping-service/Dockerfile
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgresql://logistica_user:logistica_pass@postgres:5432/logistica_db
      - CONFIG_SERVICE_URL=http://config-service:3000
      - STOCK_SERVICE_URL=http://stock-integration-service:3000
    depends_on:
      postgres:
        condition: service_healthy
      config-service:
        condition: service_healthy
      stock-integration-service:
        condition: service_healthy
    networks:
      - logistics-network
    volumes:
      - ./services/shipping-service/src:/app/src:ro
      - ./shared:/app/shared:ro
    command: npm run start:dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Microservicio de Interfaz para Operarios (Puerto 3004)
  operator-interface-service:
    build:
      context: .
      dockerfile: services/operator-interface-service/Dockerfile
    ports:
      - "3004:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgresql://logistica_user:logistica_pass@postgres:5432/logistica_db
      - CONFIG_SERVICE_URL=http://config-service:3000
      - FRONTEND_URL=http://localhost:5173
    depends_on:
      postgres:
        condition: service_healthy
      config-service:
        condition: service_healthy
    networks:
      - logistics-network
    volumes:
      - ./services/operator-interface-service/src:/app/src:ro
      - ./shared:/app/shared:ro
    command: npm run start:dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:

networks:
  logistics-network:
    driver: bridge