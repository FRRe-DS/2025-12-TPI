# ===================================
# STACK DE PORTAINER PARA DEPLOY
# ===================================

version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: logistica-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: logistica_grupo12
      POSTGRES_USER: logistica_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - logistica-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U logistica_user -d logistica_grupo12"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis para cache
  redis:
    image: redis:7-alpine
    container_name: logistica-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - logistica-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Aplicación NestJS
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: logistica-api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://logistica_user:${POSTGRES_PASSWORD}@postgres:5432/logistica_grupo12?schema=public
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: 24h
      MOCK_DISTANCE_ENABLED: true
      MOCK_STOCK_ENABLED: true
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - logistica-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # pgAdmin para administración (opcional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: logistica-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    ports:
      - "8080:80"
    depends_on:
      - postgres
    networks:
      - logistica-network

# Volúmenes persistentes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# Red personalizada
networks:
  logistica-network:
    driver: bridge
